snippet lib
	library(${1:package})

snippet req
	require(${1:package})

snippet src
	source("${1:file.R}")

snippet ret
	return(${1:code})

snippet mat
	matrix(${1:data}, nrow = ${2:rows}, ncol = ${3:cols})

snippet sg
	setGeneric("${1:generic}", function(${2:x, ...}) {
		standardGeneric("${1:generic}")
	})

snippet sm
	setMethod("${1:generic}", ${2:class}, function(${2:x, ...}) {
		${0}
	})

snippet sc
	setClass("${1:Class}", slots = c(${2:name = "type"}))

snippet if
	if (${1:condition}) {
		${0}
	}

snippet el
	else {
		${0}
	}

snippet ei
	else if (${1:condition}) {
		${0}
	}

snippet fun
	${1:name} <- function(${2:variables}) {
		{0}
	}

snippet for
	for (${1:variable} in ${2:vector}) {
		${0}
	}

snippet while
	while (${1:condition}) {
		${0}
	}

snippet switch
	switch (${1:object},
		${2:case} = ${3:action}
	)

snippet apply
	apply(${1:array}, ${2:margin}, ${3:...})

snippet lapply
	lapply(${1:list}, ${2:function})

snippet sapply
	sapply(${1:list}, ${2:function})

snippet mapply
	mapply(${1:function}, ${2:...})

snippet tapply
	tapply(${1:vector}, ${2:index}, ${3:function})

snippet vapply
	vapply(${1:list}, ${2:function}, FUN.VALUE = ${3:type}, ${4:...})

snippet rapply
	rapply(${1:list}, ${2:function})

/* READ FILES */
snippet csv
	read.csv("${1:file}", header = TRUE)
	
snippet txt
	read.table("${1:file}", header = TRUE)

snippet xls
	read_excel("${1:file}", sheet = 1)

/* VISUALISE */
snippet plot
	${1:data} %$% plot(${2:x}, ${3:y})

snippet qp
	${1:data} %$% qplot(${2:x}, ${3:y}, data = .)
	
snippet ggp
	${1:data} %>% ggplot(aes(${2:x}, ${3:y})) + geom_${4:type}()
	
snippet ggv
	${1:data} %>% ggvis(~${2:x}, ~${3:y}) %>% layer_${4:type}()

/* STATISTIC TEST AND MODELING */
snippet testing
	${1:data} %$% ${2:test.type}(${3:x}, ${4:y})

snippet glm
	${1:data} %$% glm(formula = "${2:formula}", 
							 family = "${3:family}", 
							 data = .)

/* UTILITIES */
snippet rename
	rename(${1:x}, ${2:y})
	
snippet ver
	packageVersion("${1:package}")
	
snippet emoji
	remoji::emoji(alias = "${emoji}")

/* DEVELOPMENTS */
